import json
import telebot
from telebot import types
import random

bot = telebot.TeleBot("6558850363:AAGzAm67Fi7q5VuNGZbOIrL-INWVHZlVzqA")


def main_reply_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üé≤–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ"), types.KeyboardButton("‚ùì–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏"))
    markup.row(types.KeyboardButton("üìì–†–∞—Ö—É–Ω–æ–∫"))
    return markup


def r_sub_menu_numbers():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("–õ–µ–≥–∫–æ"), types.KeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ"), types.KeyboardButton("–°–∫–ª–∞–¥–Ω–æ"))
    markup.row(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup


def random_numbers(message, random_number):
    cid = message.chat.id
    try:
        if message.text == "–°—Ç–æ–ø" or message.text.lower == "–°—Ç–æ–ø":
            with open("note.json", "r") as file:
                note = json.load(file)
            for item in note:
                if cid == item['id']:
                    item['loss'] += 1
                    with open("note.json", "w") as file:
                        json.dump(note, file)
            return bot.send_message(cid,
                                    f"–í–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ.\n–í–∞—à–∏–º —á–∏—Å–ª–æ–º –±—É–ª–æ {random_number}.",
                                    reply_markup=r_sub_menu_numbers())
        user_number = int(message.text)
        if user_number < random_number:
            bot.send_message(cid, "–ß–∏—Å–ª–æ –º–µ–Ω—à–µ –≤—ñ–¥ –∑–∞–≥–∞–¥–∞–Ω–æ–≥–æ!\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É:")
            bot.register_next_step_handler(message, random_numbers,
                                           random_number)
        elif user_number > random_number:
            bot.send_message(cid, "–ß–∏—Å–ª–æ –±—ñ–ª—å—à–µ –≤—ñ–¥ –∑–∞–≥–∞–¥–∞–Ω–æ–≥–æ!\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É:")
            bot.register_next_step_handler(message, random_numbers,
                                           random_number)
        elif user_number == random_number:
            with open("note.json", "r") as file:
                note = json.load(file)
            for item in note:
                if cid == item['id']:
                    item['victory'] += 1
                    with open("note.json", "w") as file:
                        json.dump(note, file)
            bot.send_message(cid, f"–í—ñ—Ç–∞—é –≤–∏ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!\n–í–æ–Ω–æ {random_number}", reply_markup=r_sub_menu_numbers())
    except ValueError:
        bot.send_message(cid, "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É:")
        bot.register_next_step_handler(message, random_numbers,
                                       random_number)


@bot.message_handler(commands=['start'])
def send_welcome(msg):
    bot.reply_to(msg, "–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –∑—ñ–≥—Ä–∞—î–º–æ –≥—Ä—É!", reply_markup=main_reply_menu())


@bot.message_handler(commands=['help'])
def send_help(msg):
    bot.reply_to(msg, "–í–∏–±–µ—Ä–∏ –≥—Ä—É —ñ –ø–æ—á–∏–Ω–∞–π!", reply_markup=main_reply_menu())


@bot.message_handler(func=lambda message: True)
def echo_all(msg):
    try:
        cid = msg.chat.id
        with open("note.json", "r") as file:
            note = json.load(file)
        for item in note:
            if not any(item['id'] == cid for item in note):
                new_user = {
                    'id': cid,
                    'victory': 0,
                    'loss': 0
                }
                note.append(new_user)
        with open("note.json", "w") as file:
            json.dump(note, file)
    except Exception:
        cid = msg.chat.id
        count = [
            {
                'id': cid,
                'victory': 0,
                'loss': 0
            }
        ]
        with open("note.json", "w") as file:
            json.dump(count, file)
    finally:
        cid = msg.chat.id
        with open("note.json", "r") as file:
            note = json.load(file)
        if msg.text == "üé≤–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
            bot.send_message(cid, "üé≤", reply_markup=r_sub_menu_numbers())
        elif msg.text == "‚ùì–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏":
            bot.send_message(cid,
                             "–ü—Ä–∞–≤–∏–ª–∞\n–í —Ü—ñ–π –≥—Ä—ñ —Ç—Ä–µ–±–∞ –≤–≥–∞–¥–∞—Ç–∏ —á–∏—Å–ª–æ. –Ü –≤–æ–Ω–∞ –ø–æ–¥—ñ–ª—è—î—Ç—å—Å—è –Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:\n–õ–µ–≥–∫–∞ - –≤—ñ–¥ "
                             "1 –¥–æ 10,\n–ù–æ—Ä–º–∞–ª—å–Ω–∞ - –≤—ñ–¥ 1 –¥–æ 100\n–°–∫–ª–∞–¥–Ω–∞ - –≤—ñ–¥ 1 –¥–æ 1000")
        elif msg.text == "üìì–†–∞—Ö—É–Ω–æ–∫":
            with open("note.json", "r") as file:
                note = json.load(file)
            for item in note:
                if item['id'] == cid:
                    bot.send_message(cid, f"–ü–µ—Ä–µ–º–æ–≥–∏ -- {item['victory']}\n–ü—Ä–æ–≥—Ä–∞—à—ñ -- {item['loss']}")
        elif msg.text == "–ù–∞–∑–∞–¥":
            bot.send_message(cid, "–ù–∞–∑–∞–¥", reply_markup=main_reply_menu())
        elif msg.text == "–õ–µ–≥–∫–æ":
            bot.send_message(cid, "–í–∏ –ø–æ—á–∞–ª–∏ –≥—Ä—É. –ù–∞–ø–∏—à—ñ—Ç—å ,–°—Ç–æ–ø, –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –≥—Ä–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (1 - 10):")
            random_number = random.randint(1, 10)
            bot.register_next_step_handler(msg, random_numbers, random_number)
        elif msg.text == "–ù–æ—Ä–º–∞–ª—å–Ω–æ":
            bot.send_message(cid, "–í–∏ –ø–æ—á–∞–ª–∏ –≥—Ä—É. –ù–∞–ø–∏—à—ñ—Ç—å ,–°—Ç–æ–ø, –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –≥—Ä–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (1 - 100):")
            random_number = random.randint(1, 100)
            bot.register_next_step_handler(msg, random_numbers, random_number)
        elif msg.text == "–°–∫–ª–∞–¥–Ω–æ":
            bot.send_message(cid, "–í–∏ –ø–æ—á–∞–ª–∏ –≥—Ä—É. –ù–∞–ø–∏—à—ñ—Ç—å ,–°—Ç–æ–ø, –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –≥—Ä–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (1 - 1000):")
            random_number = random.randint(1, 1000)
            bot.register_next_step_handler(msg, random_numbers, random_number)


bot.infinity_polling()
